name: Tests

# Test on all pushes, except when the push is literally just a tag (because we
# tag automatically via CI, and therefore there's no extra code in that push).
# Also, only test on pull requests into main.
on:
  push:
    tags-ignore:
      - 'v*'
  pull_request:
    branches:
      - 'main'


jobs:
  tests:
    if: "!contains(github.event.pull_request.labels.*.name, 'auto-pr')"
    env:
      ENV_NAME: tests
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}
      CC: gcc
    name: Testing
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.11"]
        tutorial: ["coeval_cubes", "caching", "lightcones"]
    defaults:
     run:
       # Adding -l {0} ensures conda can be found properly in each step
       shell: bash -l {0}
    steps:
      - uses: actions/checkout@master
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "commit_message=$(git show -s --format=%s)" >> "$GITHUB_ENV"

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge,defaults
          python-version: ${{ matrix.python-version }}
          channel-priority: true

      - name: Make it a Debug Run
        if: "contains(env.commit_message, 'ci debug')"
        run: |
          echo "log_level=ULTRA_DEBUG" >> $GITHUB_ENV
          echo "extra_pytest_args=-s --log-level-21=DEBUG" >> $GITHUB_ENV

      - name: Make it a Normal Run
        if: "!contains(env.commit_message, 'ci debug')"
        run: |
          echo "log_level=INFO" >> $GITHUB_ENV
          echo "extra_pytest_args=" >> $GITHUB_ENV

      - name: Install Non-Python Dependencies
        run: |
          conda install fftw gsl

      - name: Install 21cmFAST
        run: |
          LOG_LEVEL=${{ env.log_level }} pip install ".[dev]"

      - name: Setup papermill
        run: |
          pip install papermill
          pip install ipykernel
          python -m ipykernel install --user --name=tests

      - name: Run
        run: |
            TEST_RUN=True papermill -k tests --request-save-on-cell-execute docs/tutorials/${{ matrix.tutorial }}.ipynb ${{ matrix.tutorial }}.ipynb

      - name: Archive Notebooks
        uses: actions/upload-artifact@v4
        with:
          name: tutorials-${{ matrix.tutorial }}
          path: |
            ${{ matrix.tutorial }}.ipynb
