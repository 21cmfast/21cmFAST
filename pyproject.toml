[project]
name="21cmFAST"
dynamic = ["version"]
license="MIT"
license-files = ["LICENSE"]
description="A semi-numerical cosmological simulation code for the 21cm signal"
# long_description="%s\n%s"
# % (
#     re.compile("^.. start-badges.*^.. end-badges", re.M | re.S).sub(
#         "", _read("README.rst")
#     ),
#     re.sub(":[a-z]+:`~?(.*?)`", r"``\1``", _read("CHANGELOG.rst")),
# )
# long_description_content_type="text/x-rst"
authors=[ {name = "The 21cmFAST coredev team" ,email = "21cmfast.coredev@gmail.com"}]
readme= {file = "README.rst", content-type = "text/x-rst" }
include_package_data=true
requires-python=">=3.10"
classifiers=[
    # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
]
keywords=["Epoch of Reionization", "Cosmology"]
dependencies=[
        "click",
        "numpy>=2.0",
        "pyyaml",
        "cffi>=1.0",
        "scipy",
        "astropy>=2.0",
        "h5py>=2.8.0",
        "matplotlib",
        "bidict",
        "cosmotile>=0.2.0",
        "attrs",
        "tqdm",
        "ninja",
]

# [tool.setuptools.packages.find]
# where = ["src/py21cmfast"]

[project.optional-dependencies]
tests = [
    "clang-format",
    "clang-tidy",
    "hmf",
    "pre-commit",
    "pytest>=5.0",
    "pytest-cov",
    "tox",
    "pytest-remotedata>=0.3.2",
    "powerbox",
    "pytest-plt",
    "pytest-benchmark",
    "questionary",
    "pytest-xdist",
    "pytest-mock",
]
docs = [
    "nbsphinx",
    "numpydoc",
    "sphinx>=1.3",
    "sphinx-rtd-theme",
]
# When the min python version supports PEP 735, this can be simplified
# as dev = test_req + doc_req again (as it was implemented in setup.py)
dev = [
    "clang-format",
    "clang-tidy",
    "hmf",
    "pre-commit",
    "pytest>=5.0",
    "pytest-cov",
    "tox",
    "pytest-remotedata>=0.3.2",
    "powerbox",
    "pytest-plt",
    "pytest-benchmark",
    "questionary",
    "pytest-xdist",
    "pytest-mock",
    "nbsphinx",
    "numpydoc",
    "sphinx>=1.3",
    "sphinx-rtd-theme",
]

# UPDATE THESE
[project.urls]
Homepage="https://github.com/21cmFAST/21cmFAST"
Documentation="https://github.com/21cmFAST/21cmFAST"
Repository="https://github.com/21cmFAST/21cmFAST"
Issues="https://github.com/21cmFAST/21cmFAST"
Changelog="https://github.com/21cmFAST/21cmFAST"

[project.scripts]
21cmfast = "py21cmfast.cli:main"

[build-system]
build-backend = 'mesonpy'
requires = ['meson-python','nanobind>=2.4.0']

[tool.ruff]
line-length = 88
target-version = "py311"
exclude = [
  "*.ipynb",  # include these later
  "devel/filter_valgrind.py",
]

[tool.ruff.lint]
extend-select = [
  "UP",   # pyupgrade
  "E",    # pycodestyle
  "W",    # pycodestyle warning
  "F",    # pyflakes
  "C90",  # mccabe complexity
  "I",    # isort
  "N",    # pep8-naming
  "D",    # docstyle
  # "ANN"   # type annotations
  "B",    # bugbear
  "A",    # builtins
  "C4",   # comprehensions
  "DTZ",  # datetime
  "FA",   # future annotations
  "PIE",  # flake8-pie
  "T",    # print statements
  "PT",   # pytest-style
  "Q",    # quotes
  "SIM",  # simplify
  "PTH",  # use Pathlib
  "ERA",  # kill commented code
  "NPY",  # numpy-specific rules
  "PERF", # performance
  # "FURB", # refurb
  "RUF",  # ruff-specific rules
]
ignore = [
    "DTZ007",   # use %z in strptime
    "E203",
    "E266",
    "E501",
    "F403",
    "F401",
    "E231",
    # Naming upper/lowercase -- too hard right now.
    "N803",
    # Naming upper/lowercase -- too hard right now.
    "N806",
    # Naming upper/lowercase -- too hard right now.
    "N802",
    # Naming mixed case
    "N815",
    # Docstring in imperative mood. This should *not* be the case for @property's, but can't ignore them atm.
#    "D401",
    # Module shadowing a builtin
    "A005",
    "RUF009",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    "D103",  # ignore missing docstring in tests
    "DTZ",   # ignore datetime in tests
    "T",     # print statements
]
"devel/*.py" = [
  "T",
]
"docs/conf.py" = [
    "A",  # conf.py can shadow builtins
    "ERA",
]
"src/py21cmfast/cli.py" = [
    "D103",  # ignore missing docstrings
    "T",     # print statements
]

[tool.ruff.lint.pydocstyle]
convention = 'numpy'
property-decorators = [
    "property",
    "functools.cached_property",
    "pytest.fixture"
]
[tool.ruff.lint.mccabe]
max-complexity = 20
